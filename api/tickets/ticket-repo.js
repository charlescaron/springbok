'use strict';

var Ticket = require('./ticket-resource');
var Statuses = require('./ticket-status');
var Priorities = require('./ticket-priority');

var currentResponse;
var processResponse = function(err, response) {

    if (err) {
        currentResponse.status(500).json(err);
    } else {
        currentResponse.json(response);
    }
};

var findByStatus = function(query) {
    Ticket.find(query).
        sort({lastUpdatedOn: 'desc'}).
        exec(processResponse);
};

module.exports = {
    getAllActive: function(req, res) {
        currentResponse = res;
        findByStatus({status: {'$ne':'closed'}});
    },
    getAllClosed: function(req, res) {
        currentResponse = res;
        findByStatus({status: 'closed'});
    },
    getIdle: function(req, res) {
        currentResponse = res;
        findByStatus({status: 'open'});
    },
    getOnHold: function(req, res) {
        currentResponse = res;
        findByStatus({$or : [{status: 'blocked_third_party'}, {status: 'bugfix'}]});
    },
    getInProgress: function(req, res) {
        currentResponse = res;
        findByStatus({status: 'in_progress'});
    },
    getStatuses: function(req, res) {
        res.json(Statuses.getAll());
    },
    getPriorities: function(req, res) {
        res.json(Priorities.getAll());
    },
    getById: function(req, res) {
        currentResponse = res;
        Ticket.findById(req.params.id, processResponse);
    },
    create: function(req, res) {
        currentResponse = res;
        var rawTicket = req.body;
        var converted = new Ticket({title: rawTicket.title, status: rawTicket.status, priority: rawTicket.priority,
            description: rawTicket.description, environment: rawTicket.environment, problem: rawTicket.problem,
            client: rawTicket.client, lastUpdatedOn: new Date(), events: [{date: new Date(), text: 'Ticket created'}]});
        converted.save(processResponse);
    },
    update: function(req, res) {
        currentResponse = res;
        var rawTicket = req.body;
        var converted = {title: rawTicket.title, status: rawTicket.status, description: rawTicket.description,
            environment: rawTicket.environment, priority: rawTicket.priority};
        if (rawTicket.problem) {
            converted.problem = rawTicket.problem;
        }
        if (rawTicket.client) {
            converted.client = rawTicket.client;
        }
        converted.lastUpdatedOn = new Date();
        //It seems findByIdAndUpdate does not work well with documents whose
        // id is a sequence generated by mongoose-auto-increment
        Ticket.findOneAndUpdate({_id : rawTicket._id}, converted, processResponse);
    },
    addEvent: function(req, res) {
        currentResponse = res;
        Ticket.findById(req.params.id, function(err, response) {
            if (err) {
                res.status(500).json(err);
            } else {
                response.lastUpdatedOn = new Date();
                response.events.push({date: new Date(), text: req.body.text});
                response.save(processResponse);
            }
        });
    }
};